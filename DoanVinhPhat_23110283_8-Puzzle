import time
from collections import deque
import heapq
import tkinter as tk
from tkinter import messagebox
import threading
import random
import math

DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]
DIRECTION_NAMES = {(-1, 0): "Down", (1, 0): "Up", (0, -1): "Right", (0, 1): "Left"}

def board_to_tuple(board):
    return tuple(tuple(row) for row in board)

def find_empty(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                return i, j
    raise ValueError("No empty tile found in board")

def move_tile(board, empty_pos, direction):
    x, y = empty_pos
    dx, dy = direction
    new_x, new_y = x + dx, y + dy
    
    if 0 <= new_x < 3 and 0 <= new_y < 3:
        new_board = [list(row) for row in board]
        new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
        return new_board
    return None

def heuristic(board, goal):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = board[i][j]
            if val != 0:
                goal_pos = next(((x, y) for x, row in enumerate(goal) for y, v in enumerate(row) if v == val), (i, j))
                distance += abs(i - goal_pos[0]) + abs(j - goal_pos[1])
    return distance

def is_solvable(puzzle):
    flat = [tile for row in puzzle for tile in row if tile != 0]
    inversions = 0
    for i in range(len(flat)):
        for j in range(i + 1, len(flat)):
            if flat[i] > flat[j]:
                inversions += 1
    empty_pos = find_empty(puzzle)
    taxicab_distance = abs(empty_pos[0] - 2) + abs(empty_pos[1] - 2)
    return (inversions + taxicab_distance) % 2 == 0

def generate_random_puzzle():
    while True:
        tiles = list(range(9))
        random.shuffle(tiles)
        puzzle = [
            tiles[0:3],
            tiles[3:6],
            tiles[6:9]
        ]
        if is_solvable(puzzle):
            return puzzle

def bfs_8_puzzle(start, goal):
    queue = deque([(start, [])])
    visited = set()
    visited.add(board_to_tuple(start))

    while queue:
        current_board, path = queue.popleft()
        
        if current_board == goal:
            print("BFS Solution Path:")
            for i, state in enumerate(path, 1):
                print(f"Move {i}: {state}")
            return path
        empty_pos = find_empty(current_board)

        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board and board_to_tuple(new_board) not in visited:
                queue.append((new_board, path + [new_board]))
                visited.add(board_to_tuple(new_board))
    return None

def dfs_8_puzzle(start, goal, max_depth=50):
    stack = [(start, [], set([board_to_tuple(start)]))]
    solution = None
    
    while stack:
        current_board, path, visited = stack.pop()
        
        if current_board == goal:
            if solution is None or len(path) < len(solution):
                solution = path
            continue
            
        if len(path) >= max_depth:
            continue
            
        empty_pos = find_empty(current_board)
        directions = DIRECTIONS.copy()
        random.shuffle(directions)
        
        for direction in directions:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board:
                new_board_tuple = board_to_tuple(new_board)
                if new_board_tuple not in visited:
                    new_visited = visited.copy()
                    new_visited.add(new_board_tuple)
                    stack.append((new_board, path + [new_board], new_visited))
    
    return solution

def greedy_8_puzzle(start, goal):
    pq = [(heuristic(start, goal), start, [])]
    visited = set()
    visited.add(board_to_tuple(start))
    
    while pq:
        _, current_board, path = heapq.heappop(pq)
        if current_board == goal:
            return path
        empty_pos = find_empty(current_board)
        
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board and board_to_tuple(new_board) not in visited:
                heapq.heappush(pq, (heuristic(new_board, goal), new_board, path + [new_board]))
                visited.add(board_to_tuple(new_board))
    return None

def ucs_8_puzzle(start, goal):
    pq = [(0, start, [])]
    visited = set()
    visited.add(board_to_tuple(start))
    
    while pq:
        cost, current_board, path = heapq.heappop(pq)
        if current_board == goal:
            return path
        empty_pos = find_empty(current_board)
        
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board and board_to_tuple(new_board) not in visited:
                heapq.heappush(pq, (cost + 1, new_board, path + [new_board]))
                visited.add(board_to_tuple(new_board))
    return None

def a_star_8_puzzle(start, goal):
    pq = [(0 + heuristic(start, goal), 0, start, [])]
    visited = set()
    visited.add(board_to_tuple(start))
    
    while pq:
        f, g, current_board, path = heapq.heappop(pq)
        if current_board == goal:
            return path
        empty_pos = find_empty(current_board)
        
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board and board_to_tuple(new_board) not in visited:
                new_g = g + 1
                heapq.heappush(pq, (new_g + heuristic(new_board, goal), new_g, new_board, path + [new_board]))
                visited.add(board_to_tuple(new_board))
    return None

def dfs_ida_star(board, goal, empty_pos, path, depth, threshold, visited):
    board_tuple = board_to_tuple(board)
    
    if board == goal:
        return path
    
    current_h = heuristic(board, goal)
    f = depth + current_h
    
    if f > threshold:
        return f
    
    visited.add(board_tuple)
    
    min_threshold = float('inf')
    for direction in DIRECTIONS:
        new_board = move_tile(board, empty_pos, direction)
        if new_board:
            new_board_tuple = board_to_tuple(new_board)
            if new_board_tuple not in visited:
                new_empty_pos = (empty_pos[0] + direction[0], empty_pos[1] + direction[1])
                result = dfs_ida_star(new_board, goal, new_empty_pos, path + [new_board], depth + 1, threshold, visited)
                if isinstance(result, list):
                    return result
                if result < min_threshold:
                    min_threshold = result
    
    visited.remove(board_tuple)
    return min_threshold

def ida_star_8_puzzle(start, goal):
    threshold = heuristic(start, goal)
    empty_pos = find_empty(start)
    path = []
    visited = set()
    
    while True:
        result = dfs_ida_star(start, goal, empty_pos, path, 0, threshold, visited)
        if isinstance(result, list):
            return result
        if result == float('inf'):
            return None
        threshold = result

def simple_hill_climbing_8_puzzle(start, goal, max_steps=1000):
    current_board = [row[:] for row in start]
    path = [current_board]
    visited = set()
    steps = 0
    
    while steps < max_steps:
        if current_board == goal:
            return path
        
        empty_pos = find_empty(current_board)
        current_h = heuristic(current_board, goal)
        best_move = None
        best_h = current_h
        
        directions = random.sample(DIRECTIONS, len(DIRECTIONS))
        
        for direction in directions:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board:
                board_key = board_to_tuple(new_board)
                if board_key not in visited:
                    new_h = heuristic(new_board, goal)
                    if new_h < best_h:
                        best_move = new_board
                        best_h = new_h
        
        if best_move and best_h < current_h:
            current_board = [row[:] for row in best_move]
            path.append(current_board)
            visited.add(board_to_tuple(current_board))
            steps += 1
        else:
            possible_moves = [move_tile(current_board, empty_pos, d) for d in DIRECTIONS]
            valid_moves = [m for m in possible_moves if m and board_to_tuple(m) not in visited]
            if not valid_moves:
                break
                
            current_board = random.choice(valid_moves)
            path.append(current_board)
            visited.add(board_to_tuple(current_board))
            steps += 1
    return path if current_board == goal else None

def steepest_ascent_hill_climbing_8_puzzle(start, goal, max_steps=1000):
    current_board = [row[:] for row in start]
    path = [current_board]
    visited = set()
    steps = 0
    
    while steps < max_steps:
        if current_board == goal:
            return path
        
        empty_pos = find_empty(current_board)
        current_h = heuristic(current_board, goal)
        best_move = None
        best_h = current_h
        
        neighbors = []
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board:
                neighbors.append(new_board)
        
        if not neighbors:
            break
        
        for neighbor in neighbors:
            neighbor_h = heuristic(neighbor, goal)
            if neighbor_h < best_h:
                best_h = neighbor_h
                best_move = neighbor
        
        if best_move and best_h < current_h:
            current_board = [row[:] for row in best_move]
            path.append(current_board)
            steps += 1
        else:
            possible_moves = [move_tile(current_board, empty_pos, d) for d in DIRECTIONS]
            valid_moves = [m for m in possible_moves if m]
            
            if not valid_moves:
                break
                
            current_board = random.choice(valid_moves)
            path.append(current_board)
            steps += 1
    return path if current_board == goal else None

def stochastic_hill_climbing_8_puzzle(start, goal, max_steps=1000):
    current_board = [row[:] for row in start]
    path = [current_board]
    steps = 0
    
    while steps < max_steps:
        if current_board == goal:
            return path
        
        empty_pos = find_empty(current_board)
        current_h = heuristic(current_board, goal)
        
        improving_neighbors = []
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board:
                new_h = heuristic(new_board, goal)
                if new_h < current_h:
                    improving_neighbors.append((new_h, new_board))
        
        if improving_neighbors:
            improving_neighbors.sort()
            total = sum(1/(h+1) for h, _ in improving_neighbors)  
            r = random.uniform(0, total)
            upto = 0
            for h, neighbor in improving_neighbors:
                if upto + 1/(h+1) >= r:
                    current_board = [row[:] for row in neighbor]
                    path.append(current_board)
                    steps += 1
                    break
                upto += 1/(h+1)
        else:
            break
    return path if current_board == goal else None

def simulated_annealing_8_puzzle(start, goal, initial_temp=1000, cooling_rate=0.99, max_iterations=10000):
    current_board = [row[:] for row in start]
    current_energy = heuristic(current_board, goal)
    best_board = [row[:] for row in current_board]
    best_energy = current_energy
    
    temp = initial_temp
    path = [current_board]
    
    for i in range(max_iterations):
        if current_energy == 0:
            break
            
        temp *= cooling_rate
        empty_pos = find_empty(current_board)
        neighbors = []
        for direction in DIRECTIONS:
            new_board = move_tile(current_board, empty_pos, direction)
            if new_board:
                neighbors.append(new_board)
        
        if not neighbors:
            break
            
        new_board = random.choice(neighbors)
        new_energy = heuristic(new_board, goal)
        
        delta_energy = new_energy - current_energy
        
        if delta_energy < 0 or (temp > 0 and random.random() < math.exp(-delta_energy / temp)):
            current_board = [row[:] for row in new_board]
            current_energy = new_energy
            path.append(current_board)
            
            if current_energy < best_energy:
                best_board = [row[:] for row in current_board]
                best_energy = current_energy
    
    return path if best_energy == 0 else None

def beam_search_8_puzzle(start, goal, beam_width=3):
    def evaluate_node(board):
        return heuristic(board, goal)
    
    beam = [(start, [], evaluate_node(start))]
    visited = set()
    visited.add(board_to_tuple(start))
    
    while beam:
        next_beam = []
        
        for current_board, path, score in beam:
            if current_board == goal:
                return path
            
            empty_pos = find_empty(current_board)
            
            for direction in DIRECTIONS:
                new_board = move_tile(current_board, empty_pos, direction)
                if new_board:
                    new_board_tuple = board_to_tuple(new_board)
                    if new_board_tuple not in visited:
                        new_path = path + [new_board]
                        new_score = evaluate_node(new_board)
                        next_beam.append((new_board, new_path, new_score))
                        visited.add(new_board_tuple)
        
        if not next_beam:
            return None
        
        next_beam.sort(key=lambda x: x[2])
        beam = next_beam[:beam_width]
    
    return None

def and_or_search_8_puzzle(start, goal, max_depth=25):
    visited = set()  
    
    def recursive_search(state, path, depth):
        state_tuple = board_to_tuple(state)
        
        if depth > max_depth:
            return None
        if state_tuple in visited:
            return None
        if state == goal:
            return path
            
        visited.add(state_tuple)
        empty_pos = find_empty(state)
        solutions = []
        
        for direction in DIRECTIONS:
            new_state = move_tile(state, empty_pos, direction)
            if new_state:
                solution = recursive_search(new_state, path + [new_state], depth + 1)
                if solution:
                    solutions.append(solution)
        
        return min(solutions, key=len) if solutions else None
    
    return recursive_search(start, [start], 0)

def backtracking_8_puzzle(start, goal, max_depth=30):
    best_solution = None
    visited = set()
    
    def recursive_search(state, path, depth):
        nonlocal best_solution
        
        if depth > max_depth:
            return
            
        state_tuple = board_to_tuple(state)
        if state_tuple in visited:
            return
        visited.add(state_tuple)
        
        if state == goal:
            if best_solution is None or len(path) < len(best_solution):
                best_solution = path.copy()
            return
            
        empty_pos = find_empty(state)
        
        neighbors = []
        for direction in DIRECTIONS:
            new_state = move_tile(state, empty_pos, direction)
            if new_state:
                h = heuristic(new_state, goal)
                neighbors.append((h, new_state))
        
        neighbors.sort(key=lambda x: x[0])
        
        for _, new_state in neighbors:
            new_state_tuple = board_to_tuple(new_state)
            if new_state_tuple not in visited:
                path.append(new_state)
                recursive_search(new_state, path, depth + 1)
                path.pop()
    
    recursive_search(start, [start], 0)
    return best_solution

class PuzzleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("8-Puzzle Solver")
        self.root.configure(bg="#F0F2F5")
        
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        root.resizable(True, True)
        
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

        self.colors = {
            "primary": "#2A9DF4",
            "secondary": "#187BCD",
            "background": "#F0F2F5",
            "tile": "#FFFFFF",
            "text": "#2D3436",
            "accent": "#FF7675"
        }

        self.start_state = [
            [1, 2, 3],
            [4, 5, 0],
            [6, 7, 8]
        ]
        
        self.goal_state = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 0]
        ]

        self.solution = []
        self.current_step = 0
        self.step_count = 0
        self.move_directions = []

        self.main_frame = tk.Frame(root, bg=self.colors["background"])
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        self.main_frame.grid_rowconfigure(0, weight=1)
        self.main_frame.grid_columnconfigure(0, weight=1)
        self.main_frame.grid_columnconfigure(1, weight=1)

        self.left_frame = tk.Frame(self.main_frame, bg=self.colors["background"])
        self.left_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))

        self.right_frame = tk.Frame(self.main_frame, bg=self.colors["background"])
        self.right_frame.grid(row=0, column=1, sticky="nsew")

        self.board_frame = tk.Frame(self.left_frame, bg=self.colors["background"])
        self.board_frame.pack(pady=(0, 20))
        
        self.buttons = []
        for i in range(3):
            row = []
            for j in range(3):
                btn = tk.Button(self.board_frame, 
                              text="", 
                              font=("Segoe UI", 24, "bold"),
                              width=4, 
                              height=2,
                              bg=self.colors["tile"],
                              fg=self.colors["text"],
                              relief="ridge",
                              borderwidth=3)
                btn.grid(row=i, column=j, padx=5, pady=5)
                row.append(btn)
            self.buttons.append(row)

        self.control_frame = tk.Frame(self.left_frame, bg=self.colors["background"])
        self.control_frame.pack(fill=tk.X, pady=10)

        self.algo_frame = tk.Frame(self.control_frame, bg=self.colors["background"])
        self.algo_frame.pack()

        button_config = {
            "font": ("Segoe UI", 10, "bold"),
            "width": 20,
            "height": 1,
            "relief": "flat",
            "bd": 0,
            "activebackground": self.colors["secondary"]
        }

        algorithms = [
            ("BFS", bfs_8_puzzle),
            ("DFS", dfs_8_puzzle),
            ("Greedy", greedy_8_puzzle),
            ("UCS", ucs_8_puzzle),
            ("A*", a_star_8_puzzle),
            ("IDA*", ida_star_8_puzzle),
            ("Simple Hill Climbing", simple_hill_climbing_8_puzzle),
            ("Steepest Hill Climbing", steepest_ascent_hill_climbing_8_puzzle),
            ("Stochastic Hill Climbing", stochastic_hill_climbing_8_puzzle),
            ("Simulated Annealing (SA)", simulated_annealing_8_puzzle),
            ("Beam Search", lambda s, g: beam_search_8_puzzle(s, g, beam_width=3)),
            ("AND-OR Search", and_or_search_8_puzzle),
            ("Backtracking", backtracking_8_puzzle)
        ]

        for i, (text, algo) in enumerate(algorithms):
            btn = tk.Button(self.algo_frame, 
                           text=text,
                           command=lambda a=algo: self.solve_puzzle(a),
                           bg=self.colors["primary"],
                           fg="white",
                           **button_config)
            btn.grid(row=i//3, column=i%3, padx=3, pady=3)

        self.step_label = tk.Label(self.control_frame,
                                 text="Steps: 0",
                                 font=("Segoe UI", 12, "bold"),
                                 bg=self.colors["background"],
                                 fg=self.colors["text"])
        self.step_label.pack(pady=(10, 0))

        self.reset_btn = tk.Button(self.control_frame,
                                 text="Reset Puzzle",
                                 command=self.reset_board,
                                 bg=self.colors["accent"],
                                 fg="white",
                                 **button_config)
        self.reset_btn.pack(pady=5)

        self.random_btn = tk.Button(self.control_frame,
                                   text="Random Puzzle",
                                   command=self.randomize_board,
                                   bg=self.colors["accent"],
                                   fg="white",
                                   **button_config)
        self.random_btn.pack(pady=5)

        self.moves_label = tk.Label(self.right_frame,
                                  text="Move Directions",
                                  font=("Segoe UI", 14, "bold"),
                                  bg=self.colors["background"],
                                  fg=self.colors["text"])
        self.moves_label.pack(pady=(0, 10))

        self.moves_text = tk.Text(self.right_frame,
                                 height=20,
                                 width=30,
                                 font=("Segoe UI", 12),
                                 bg="#FFFFFF",
                                 fg=self.colors["text"],
                                 relief="flat",
                                 bd=2)
        self.moves_text.pack(fill=tk.BOTH, expand=True, padx=10)
        self.moves_text.config(state=tk.DISABLED)

        self.update_board(self.start_state)
        self.add_hover_effects()

    def add_hover_effects(self):
        def on_enter(e):
            e.widget.config(bg=self.colors["secondary"])
        def on_leave(e):
            e.widget.config(bg=self.colors["primary"])
        
        for child in self.algo_frame.winfo_children():
            if isinstance(child, tk.Button):
                child.bind("<Enter>", on_enter)
                child.bind("<Leave>", on_leave)
        
        self.reset_btn.config(activebackground="#FF5252")
        self.reset_btn.bind("<Enter>", lambda e: e.widget.config(bg="#FF5252"))
        self.reset_btn.bind("<Leave>", lambda e: e.widget.config(bg=self.colors["accent"]))
        
        self.random_btn.config(activebackground="#FF5252")
        self.random_btn.bind("<Enter>", lambda e: e.widget.config(bg="#FF5252"))
        self.random_btn.bind("<Leave>", lambda e: e.widget.config(bg=self.colors["accent"]))

    def update_board(self, board):
        for i in range(3):
            for j in range(3):
                value = board[i][j]
                self.buttons[i][j].config(text=str(value) if value != 0 else "",
                                        bg=self.colors["tile"])

    def get_move_direction(self, prev_board, curr_board):
        try:
            prev_empty = find_empty(prev_board)
            curr_empty = find_empty(curr_board)
            dx = curr_empty[0] - prev_empty[0]
            dy = curr_empty[1] - prev_empty[1]
            direction = DIRECTION_NAMES.get((dx, dy))
            if not direction:
                print(f"Invalid direction: dx={dx}, dy={dy}, prev_empty={prev_empty}, curr_empty={curr_empty}")
                print(f"Prev board: {prev_board}")
                print(f"Curr board: {curr_board}")
                return ""
            print(f"Calculated direction: {direction}, dx={dx}, dy={dy}, prev_empty={prev_empty}, curr_empty={curr_empty}")
            return direction
        except Exception as e:
            print(f"Error in get_move_direction: {e}")
            return ""

    def update_moves_display(self):
        self.moves_text.config(state=tk.NORMAL)
        self.moves_text.delete(1.0, tk.END)
        for i, direction in enumerate(self.move_directions, 1):
            self.moves_text.insert(tk.END, f"{i}. {direction}\n")
        self.moves_text.config(state=tk.DISABLED)

    def animate_backtracking(self, path, current_step):
        if current_step < len(path):
            self.update_board(path[current_step])
            if current_step > 0:
                direction = self.get_move_direction(path[current_step-1], path[current_step])
                if direction:
                    self.move_directions.append(direction)
                    self.update_moves_display()
                    print(f"Backtracking Step {current_step}: {direction}")
            self.step_count = len(self.move_directions)
            self.step_label.config(text=f"Steps: {self.step_count}")
            self.root.after(300, lambda: self.animate_backtracking(path, current_step + 1))
        else:
            self.reset_btn.config(state=tk.NORMAL)
            self.random_btn.config(state=tk.NORMAL)

    def solve_puzzle(self, algorithm):
        def run_algorithm():
            try:
                self.reset_btn.config(state=tk.DISABLED)
                self.random_btn.config(state=tk.DISABLED)
                self.move_directions = []
                self.step_count = 0
                self.update_moves_display()
                start_time = time.time()
                self.solution = algorithm(self.start_state, self.goal_state)
                elapsed_time = time.time() - start_time
                
                if self.solution:
                    steps = len(self.solution)
                    print(f"Solution found with {steps} moves:")
                    print(f"Start state: {self.start_state}")
                    for i, state in enumerate(self.solution, 1):
                        print(f"Move {i}: {state}")
                    messagebox.showinfo("Solution Found", 
                                    f"Solution found in {steps} steps\n"
                                    f"Time: {elapsed_time:.2f}s")
                    self.current_step = 0
                    if algorithm == backtracking_8_puzzle:
                        self.animate_backtracking([self.start_state] + self.solution, 0)
                    else:
                        self.animate_solution()
                else:
                    messagebox.showerror("Solution Error", 
                                        "Algorithm couldn't find solution")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {str(e)}")
            finally:
                self.reset_btn.config(state=tk.NORMAL)
                self.random_btn.config(state=tk.NORMAL)
    
        threading.Thread(target=run_algorithm).start()

    def animate_solution(self):
        if self.current_step < len(self.solution) + 1:
            board = self.start_state if self.current_step == 0 else self.solution[self.current_step - 1]
            self.update_board(board)
            if self.current_step > 0:
                prev_board = self.start_state if self.current_step == 1 else self.solution[self.current_step - 2]
                direction = self.get_move_direction(prev_board, board)
                if direction:
                    self.move_directions.append(direction)
                    self.update_moves_display()
                    print(f"Step {self.current_step}: {direction}")
            self.step_count = len(self.move_directions)
            self.step_label.config(text=f"Steps: {self.step_count}")
            self.current_step += 1
            self.root.after(500, self.animate_solution)
        else:
            self.reset_btn.config(state=tk.NORMAL)
            self.random_btn.config(state=tk.NORMAL)

    def reset_board(self):
        self.start_state = [
            [1, 2, 3],
            [4, 5, 0],
            [6, 7, 8]
        ]
        self.update_board(self.start_state)
        self.step_count = 0
        self.step_label.config(text="Steps: 0")
        self.move_directions = []
        self.solution = []
        self.current_step = 0
        self.update_moves_display()

    def randomize_board(self):
        self.start_state = generate_random_puzzle()
        self.update_board(self.start_state)
        self.step_count = 0
        self.step_label.config(text="Steps: 0")
        self.move_directions = []
        self.solution = []
        self.current_step = 0
        self.update_moves_display()
        print(f"Randomized puzzle: {self.start_state}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PuzzleApp(root)
    root.mainloop()